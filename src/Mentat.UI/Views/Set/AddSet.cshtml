@using static Mentat.Domain.Constants

@model Mentat.UI.ViewModels.SetViewModel

@{
    ViewData["Title"] = "Create Set";
    int cardCount = 1;
}

<img src="/images/study-red.png" width="100" height="95">
<span class="align-middle title-text">Create a Set</span>
<hr/>

<div>
    <form asp-action="SaveSet" asp-route-id="@Model.Id">
        <div>
            <input asp-for="Title" class="form-control" placeholder="Enter a Title" />
            <textarea asp-for="Description" class="form-control" placeholder="Add a description..."></textarea>
            <input asp-for="IsPublic" type="radio" id="public" name="visibility" checked="checked" value="Public" />
            <label for="public">Public</label>
            <input type="radio" id="private" name="visibility" value="Private" />
            <label for="private">Private</label>
        </div>
        <div>
            @for (int i = 0; i < cardCount; i++)
            {
                <div class="card-box">
                    <h4>@(i + 1)</h4>
                    <hr />
                    <div class="form-row">
                        <div class="form-group col">
                            <textarea asp-for="Cards[i].Question" id="question-@i" class="form-control" placeholder="Question"></textarea>
                        </div>
                        <div class="form-group col">
                            <textarea asp-for="Cards[i].Answer" id="answer-@i" class="form-control" placeholder="Answer"></textarea>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col">
                            <input asp-for="Cards[i].Subject" id="subject-@i" class="form-control" placeholder="Subject" />
                        </div>
                        <div class="form-group col">
                            @Html.DropDownListFor(m => m.Cards[i].DifficultyLevel, ((DifficultyLevel[])Enum.GetValues(typeof(DifficultyLevel))).ToList()
                                .Select(d => new SelectListItem { Text = d.ToString(), Value = d.ToString() }), null, new { @class = "form-control" })
                        </div>
                        <div class="form-group col">
                            <input asp-for="Cards[i].Notes" id="notes-@i" class="form-control" placeholder="Notes" />
                        </div>
                        <div class="form-group col">
                            <div class="tag-field" onclick="Array.from(this.children).find(n => n.tagName === 'INPUT').focus()">
                                <input type="text" onkeyup="tagFieldKeyup(this)" placeholder="Tags" />
                            </div>
                            <span asp-validation-for="Cards[i].Tags" class="text-danger"></span>
                        </div>
                        <div class="form-group col">
                            <button type="button" class="bg-black text-on-dark font-weight-bold" onclick="removeCard(this)">Remove Card</button>
                        </div>
                    </div>
                </div>
            }
        </div>
        <button type="button" class="bg-black text-on-dark font-weight-bold" onclick="addCard()">Add Card</button>
        <button type="button" class="bg-black text-on-dark font-weight-bold">Add Existing</button>
        <button type="button" class="bg-black text-on-dark font-weight-bold" onclick="removeAllCards()">Remove All</button>
        <button type="submit" class="bg-black text-on-dark font-weight-bold">Create Set</button>
    </form>
</div>

<script>
    function addCard() {
        var cardBoxes = document.querySelectorAll('.card-box');
        var lastCardBox = cardBoxes[cardBoxes.length - 1];
        var newCardBox = lastCardBox.cloneNode(true);
        var cardTitle = newCardBox.querySelector('h4');
        var cardNumber = parseInt(cardTitle.textContent.match(/\d+/)[0]) + 1;
        cardTitle.textContent = cardNumber;

        // Clear input values in the cloned card box
        var inputs = newCardBox.querySelectorAll('input[type="text"], textarea');
        inputs.forEach(function (input) {
            if (input.id.includes('subject')) {
                // Preserve the value for the Subject input
                return;
            }
            input.value = '';
        });

        lastCardBox.parentNode.appendChild(newCardBox);
    }

    function removeCard(button) {
        var cardBox = button.closest('.card-box');
        var cardBoxes = document.querySelectorAll('.card-box');
        if (cardBoxes.length > 1) {
            cardBox.remove();
            updateCardNumbers();
        }
    }

    function updateCardNumbers() {
        var cardBoxes = document.querySelectorAll('.card-box');
        cardBoxes.forEach(function (cardBox, index) {
            var cardTitle = cardBox.querySelector('h4');
            cardTitle.textContent = index + 1;
        });
    }

    function removeAllCards() {
        var cardBoxes = document.querySelectorAll('.card-box');
        if (cardBoxes.length > 1) {
            // Remove all card boxes except the first one
            for (var i = cardBoxes.length - 1; i > 0; i--) {
                cardBoxes[i].remove();
            }
            updateCardNumbers();
        }
        // clear any input in the first box
        var firstCardBox = cardBoxes[0];
        var inputs = firstCardBox.querySelectorAll('input[type="text"], textarea');
        inputs.forEach(function (input) {
            input.value = '';
        });
    }
</script>
