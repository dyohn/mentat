@using Mentat.Domain.Models
@using static Mentat.Domain.Constants

@model StudentVM

@{
    ViewData["Title"] = "Student";
}

@Html.HiddenFor(m => m.NumberOfFlashCards)
@Html.HiddenFor(m => m.CurrentIndex)
<span class="dot"></span>
<div class="col-sm-12">
    <div class="row bottom-buffer col-sm-12">
        <div class="col-sm-9">
            <span><img src="/images/fluent_brain-circuit-20-filled.png"></span>    
            <span class="align-middle title-text">Study</span>
        </div>
        <div class="col-sm-3">
            <div class="row">
                <div class="col-sm-3">
                    <a href="javascript:;" onclick="refreshFlashcardList();"><span class="fa fa-refresh fa-2x fsu-maroon-color"></span></a>
                </div>
            </div>
            <div class="row top-buffer">
                <div class="col-sm-6">
                    @Html.TextBoxFor(m => m.SelectedCardIndex, new { style="width:40px;", @onchange = "updateSelectedCard(this);" }) <text>&nbsp;</text> of @Model.NumberOfFlashCards
                </div>
            </div>
        </div>
    </div>

    @using(Html.BeginForm())
    {
        <div class="row accordion col-sm-12 bottom-buffer">
            <a class="fsu-black-color" onclick="onClickFilterAccordian();" style="font-size: 20px" aria-expanded="false">
            <span class="fa fa-caret-right fsu-black-color" id="caret-right"></span> @Model.FilterCount filter(s) applied</a>
            <div class="row top-buffer col-sm-12 collapse in" id="filters">
                <text>&nbsp;&nbsp;&nbsp;&nbsp;</text>
                <div style="display:inline-block;">
                    @Html.Label(null, "Difficulty:", new { style="font-size: 15px; font-weight: bold;" })
                    <text>&nbsp;</text>
                    @Html.ListBoxFor(m => m.SelectedDifficulties, ((DifficultyLevel[]) Enum.GetValues(typeof(DifficultyLevel))).ToList()
                        .Select(d => new SelectListItem { Text = d.ToString(), Value = d.ToString() } ), new { @multiple = "multiple" })
                    <text>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</text>
                    <button type="submit" class="bg-black text-on-dark font-weight-bold">Apply</button>
                </div>
            </div>
        </div>
    }

    @for (var i = 1; i <= Model.NumberOfFlashCards; i++)
    {
        var display = i == 1 ? "inline" : "none";
        <div id="flashcard_@i" style="display:@display">
            <div style="width:10px; float:left; height:126px; background-color: @Model.AvailableCards[i - 1].DifficultyLevelColor; border:1px solid gray">&nbsp;</div>
            <div>
                @Html.Partial("_Flashcard", Model.AvailableCards[i - 1], new ViewDataDictionary(ViewData) { { "index", i } })
            </div>
        </div>
    }

    <div class="row top-buffer col-sm-12">
        <button type="button" class="bg-black text-on-dark font-weight-bold" onclick="location.href='@Url.Action("AddEditCard", "Card")';">Add Flashcard</button>
    </div>
    <hr class="bold-black top-buffer col-sm-12">
    <div class="row top-buffer col-sm-12">
        <table id="cardlist" class="table top-buffer">
            <thead>
                <tr>
                    <th align="center">List of Flashcards</th>
					<!--Add search bar-->
					<th><input id="searchbar" type="text" placeholder="Search.."></th>
                </tr>
            </thead>
            <colgroup>
                <col span="1" style="width: 85%;">
                <col span="1" style="width: 10%;">
            </colgroup>
            <tbody id="cardbody">
				<!--Card List Logic-->
                
            </tbody>
        </table>
    </div>
	<script>
		//grab cards
		var cardtable = [];
		var cardcount = 0;
		var matchlist = [];
		@foreach (var c in Model.AvailableCards)
		{
			@:cardtable.push({ cardID: "@c.CardID", question: "@c.CardQuestion", answer: "@c.HiddenCardAnswer", editable: "@c.CanEditOrDelete" });
			@:matchlist.push(cardcount);
			@:cardcount++;
		}
		console.log(cardtable);
		displaycards();
		function displaycards(){
			const table = document.getElementById("cardlist");
			const body = document.getElementById("cardbody");
			body.innerHTML = "";
			if(matchlist.length > 0)
				for (var i = 0; i< matchlist.length; i++)
				{
					
					let row = body.insertRow();
					let a = row.insertCell(0);
					try{
						a.innerHTML = cardtable[matchlist[i]]['question'];
					} catch(error){
						var rowCount = table.rows.length;
						table.deleteRow(rowCount -1);
						continue;
					}
					let b = row.insertCell(1);
				b.innerHTML = '<a href="javascript:;" title="View Details" ><i class="fa-solid fa-eye fsu-maroon-color" onclick="window.location.href=\'/Card/Details/' + cardtable[matchlist[i]]['cardID'] + '\';"></i></a>';
					if(cardtable[matchlist[i]]['editable'] === "True")
						b.innerHTML += `<text> | </text>
						<a href="javascript:;" title="Edit Flashcard"><i class="fa-solid fa-file-pen fsu-black-color" onclick="window.location.href=\'/AddEditCard/Details/' + cardtable[matchlist[i]]['cardID'] + '\';"></i></a>
						<text> | </text>
						`;
				}
			else
			{
				let row = body.insertRow();
				let a = row.insertCell(0);
				a.innerHTML = "<text>No Results</text>";
			}
		}

		function search(text){
			matchlist = [];
			const words = text.toLowerCase().split(' ');
			//console.log(words)
			for(var i = 0; i < cardcount; i++){
				var contains = true;
				//console.log(cardtable[i]['question']);
				let ques = cardtable[i]['question'].toLowerCase().replace(/[.,:;?!]/g, "").split(' ');
				//console.log(ques);
				for (var j = 0; j < words.length; j++) {
					//console.log(words[j])
					if (ques.indexOf(words[j]) === -1) {
						contains = false;
					}
				}
				if(contains){
					console.log(i);
					matchlist.push(i);
				}
			}
			console.log(text);
		}

		var input = document.getElementById("searchbar");
		input.addEventListener("keypress", function (event) {
			if (event.key === "Enter") {
				if(input.value === "")
				{
					for (var j = 0; j < cardcount; j++){
						matchlist.push(j);
					}
				}
				else{
					search(input.value);
				}
				displaycards();
			}
		});
		
	</script>

    <!-- Delete Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Flashcard</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this flashcard?  
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-secondary" onclick="deleteFlashcard(this)" id="confirmDelete" data-id-to-delete="">Delete</button>
                    <button type="button" class="btn bg-primary text-white" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/js/Student.js"></script>