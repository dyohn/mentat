@using Mentat.Domain.Models
@using static Mentat.Domain.Constants

@model StudentVM

@{
	ViewData["Title"] = "Student";
}

@Html.HiddenFor(m => m.NumberOfFlashCards)
@Html.HiddenFor(m => m.CurrentIndex)
<span class="dot"></span>
<div class="col-sm-12">
    <div class="row bottom-buffer col-sm-12">
        <div class="col-sm-9">
            <span><img src="/images/fluent_brain-circuit-20-filled.png"></span>
            <span class="align-middle title-text">Study</span>
        </div>
        <div class="col-sm-3">
            <div class="row">
                <div class="col-sm-3">
                    <a href="javascript:;" onclick="refreshFlashcardList();"><span class="fa fa-refresh fa-2x fsu-maroon-color"></span></a>
                </div>
            </div>
            <div class="row top-buffer">
                <div class="col-sm-6">
                    @Html.TextBoxFor(m => m.SelectedCardIndex, new { style = "width:40px;", @onchange = "updateSelectedCard(this);" }) <text>&nbsp;</text> of @Model.NumberOfFlashCards
                </div>
            </div>
        </div>
    </div>

    @using (Html.BeginForm())
    {
        <div class="row accordion col-sm-12 bottom-buffer">
            <a class="fsu-black-color" onclick="onClickFilterAccordian();" style="font-size: 20px" aria-expanded="false">
                <span class="fa fa-caret-right fsu-black-color" id="caret-right"></span> @Model.FilterCount filter(s) applied
            </a>
            <div class="row top-buffer col-sm-12 collapse in" id="filters">

                <div id="tag-buttons">
                    @{
                        var tags = Model.AllUniqueTags;
                        int counter = 0;
                    }

                    <div>
                        @foreach (var tag in tags)
                        {
                            if (tag == null || tag.Length == 0)
                            {
                                continue;
                            }
                            if (counter % 4 == 0)
                            {
                            @:</div><div>
                            }
                            <button type="button" class="btn btn-primary tag-button" data-tag=@tag.Replace(' ', '_')>@tag</button>
                            counter++;
                        }
                    </div>
                </div>
                <script>var container = document.getElementById("tag-buttons");
                    var selectedTags = [];
                    var filteredCards = [];
                    // add a click event listener to the tag buttons
                    var buttons = document.getElementsByClassName("tag-button");
                    for (var i = 0; i < buttons.length; i++) {
                        buttons[i].addEventListener("click", function () {
                            resetFlashCards();
                            var tag = this.getAttribute("data-tag").replace(/ /g, "_");
                            if (selectedTags.includes(tag)) {
                                selectedTags.splice(selectedTags.indexOf(tag), 1); // remove the tag from the list of selected tags
                                this.classList.remove("selected"); // remove the "selected" class from the button
                            } else {
                                selectedTags.push(tag); // add the tag to the list of selected tags
                                this.classList.add("selected"); // add the "selected" class to the button
                            }
                            var tableRows = document.querySelectorAll('#flashcard-list tbody tr');
                            if (selectedTags.length == 0) {
                                filteredCards = [];
                                for (var i = 0; i < tableRows.length; i++) {
                                    tableRows[i].classList.remove('hidden');
                                }
                            }
                            else {
                                for (var i = 0; i < tableRows.length; i++) {
                                    for (var j = 0; j < selectedTags.length; j++) {
                                        if (tableRows[i].classList.contains(selectedTags[j])) {
                                            tableRows[i].classList.remove('hidden');
                                            filteredCards.splice(i);
                                            break;
                                        } else {
                                            tableRows[i].classList.add('hidden');
                                            filteredCards.push(i);
                                        }
                                    }
                                }
                            }
                            rebuildCarousel(selectedTags);
                        });
                    }</script>

                <text>&nbsp;&nbsp;&nbsp;&nbsp;</text>
                <div style="display:inline-block;">
                    @Html.Label(null, "Difficulty:", new { style = "font-size: 15px; font-weight: bold;" })
                    <text>&nbsp;</text>
                    @Html.ListBoxFor(m => m.SelectedDifficulties, ((DifficultyLevel[])Enum.GetValues(typeof(DifficultyLevel))).ToList()
                        .Select(d => new SelectListItem { Text = d.ToString(), Value = d.ToString() }), new { @multiple = "multiple" })
                    <text>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</text>
                    <button type="submit" class="bg-black text-on-dark font-weight-bold">Apply</button>
                </div>
            </div>
        </div>
    }
    <div id="carousel-items" class="carousel-container">
        @for (var i = 1; i <= Model.NumberOfFlashCards; i++)
        {
            var classes = "";
            foreach (var tag in Model.AvailableCards[i - 1].Tags ?? Enumerable.Empty<string>())
            {
                if (@tag == null) { continue; }
                classes += @tag.Replace(" ", "_") + ' ';
            }
            var display = i == 1 ? "inline" : "none";
            <div id="flashcard_@i" style="display:@display" class="@classes">
                <div>
                    @Html.Partial("_Flashcard", Model.AvailableCards[i - 1], new ViewDataDictionary(ViewData) { { "index", i } })
                </div>
            </div>
        }
    </div>
    <div class="row">
        <div class="col-sm-3">
            <button id="easyButton" class="button" onclick="setUserDifficultyLevel('@Model.AvailableCards[@Model.CurrentIndex].CardID','easy')">EASY</button>
        </div>
        <div class="col-sm-3">
            <button id="mediumButton" class="button" onclick="setUserDifficultyLevel('@Model.AvailableCards[@Model.CurrentIndex].CardID','medium')">MEDIUM</button>
        </div>
        <div class="col-sm-3">
            <button id="hardButton" class="button" onclick="setUserDifficultyLevel('@Model.AvailableCards[@Model.CurrentIndex].CardID','hard')">HARD</button>
        </div>
    </div>
    <div class="row top-buffer col-sm-12">
        <button type="button" class="bg-black text-on-dark font-weight-bold" onclick="location.href='@Url.Action("AddEditCard", "Card")';">Add Flashcard</button>
    </div>
    <hr class="bold-black top-buffer col-sm-12">
    <div class="row top-buffer col-sm-12">
        <table id="flashcard-list" class="table top-buffer">
            <thead>
                <tr>
                    <th align="center">List of Flashcards</th>
                    <!--Add search bar-->
                    <th class="input-table-head">
                        <div class="input-wrapper">
                            <input id="searchbar" type="text" placeholder="Search..">
                            <button id="reset-button" class="bg-black text-on-dark font-weight-bold" type="button" onclick="resetFlashCards()">Show All</button>
                        </div>
                    </th>
                </tr>
            </thead>
            <colgroup>
                <col span="1" style="width: 85%;">
                <col span="1" style="width: 10%;">
            </colgroup>
            <tbody id="cardbody">
                @for (var i = 1; i <= Model.NumberOfFlashCards; i++)
                {
                    var classes = "";
                    foreach (var tag in Model.AvailableCards[i - 1].Tags ?? Enumerable.Empty<string>())
                    {
                        if (tag == null)
                        {
                            continue;
                        }
                        classes += tag.Replace(" ", "_") + ' ';
                    }
                    <tr class="@classes">
                        <td>
                            @Html.DisplayFor(m => m.AvailableCards[i - 1].CardQuestion)
                        </td>
                        <td>
                            <a href="javascript:;" title="View Details"><i class="fa-solid fa-eye fsu-maroon-color" onclick="location.href='@Url.Action("Details", "Card", new { id = Model.AvailableCards[i - 1].CardID })';"></i></a>
                            @if (Model.AvailableCards[i - 1].CanEditOrDelete)
                            {
                                <text> | </text>
                                <a href="javascript:;" title="Edit Flashcard"><i class="fa-solid fa-file-pen fsu-black-color" onclick="location.href='@Url.Action("AddEditCard", "Card", new { id = Model.AvailableCards[i - 1].CardID })';"></i></a>
                                <text> | </text>
                                <a href="javascript:;" title="Delete Flashcard"><i class="fa-solid fa-trash-can fsu-maroon-color" data-id="@Model.AvailableCards[i - 1].CardID" data-togle="modal" data-target="#deleteModal"></i></a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <script>
		//grab cards
		var cardtable = [];
		var cardcount = 0;
		var matchlist = [];
		const input = document.getElementById('searchbar');
		@foreach (var c in Model.AvailableCards)
		{
			@:cardtable.push({ cardID: "@c.CardID", question: "@c.CardQuestion", answer: "@c.HiddenCardAnswer", editable: "@c.CanEditOrDelete", tags: [] });
			if(c.Tags is not null)
			{
				@:var tag = [];
				foreach (var d in c.Tags)
				{
					var s = d;
					@:var str = "@s";
					@:console.log(str);
					@:tag.push(str);
					@:console.log("push worked");
				}
				@:cardtable[cardtable.length - 1]['tags'] = tag;
			}
			@:matchlist.push(cardcount);
			@:cardcount++;
		}
			console.log(cardtable);

		function displaycards() {
			const body = document.getElementById("cardbody");
            const tableRows = document.querySelectorAll('#flashcard-list tbody tr');
			if (matchlist.length > 0)
				for (var i = 0; i < matchlist.length; i++) {
                    tableRows[matchlist[i]].classList.remove('hidden');
				}
			else {
				let row = body.insertRow();
				let a = row.insertCell(0);
				a.setAttribute("id", "no-results");
				a.innerHTML = "<text>No Results</text>";
			}
		}

		function search(text) {
			matchlist = [];
			const words = text.toLowerCase().split(' ');
            const tableRows = document.querySelectorAll('#flashcard-list tbody tr');
			//console.log(words)
			for (var i = 0; i < cardcount; i++) {
                tableRows[i].classList.add('hidden');
				var contains = true;
				//console.log(cardtable[i]['question']);
				let ques = cardtable[i]['question'].toLowerCase();
				//console.log(ques);
				for (var j = 0; j < words.length; j++) {
					//console.log(words[j])
					//console.log("tags for card " + i + ": " + cardtable[i]['tags']);
					if(words[j].at(0) === '#'){
						contains = false;
						for (var k = 0; k < cardtable[i]['tags'].length; k++) {
							if (cardtable[i]['tags'][k].toLowerCase().includes(words[j].substring(1, words[j].length))) {
								contains = true;
								break;
							}
						}
					}
					else if (!ques.includes(words[j].toLowerCase())) {
						contains = false;
					}
				}
				if (contains && !filteredCards.includes(i)) {
					console.log(i);
					matchlist.push(i);
				}
			}
			console.log(text);
		}

		function resetFlashCards() {
			input.value = "";
            var e = document.getElementById('no-results');
            if (e !== null)
                e.remove();
			for (var j = 0; j < cardcount; j++) {
                if (filteredCards.includes(j)) continue;
                matchlist.push(j);
			}
			displaycards();
		}

		input.addEventListener("keypress", function (event) {
			if (event.key === "Enter") {
				var e = document.getElementById('no-results');
				if (e !== null)
					e.remove();
				if (input.value === "") {
					for (var j = 0; j < cardcount; j++) {
						if (filteredCards.includes(j)) continue;
						matchlist.push(j);
					}
				}
				else {
					search(input.value);
				}
				displaycards();
			}
		});

    </script>

    <!-- Delete Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Flashcard</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this flashcard?
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-secondary" onclick="deleteFlashcard(this)" id="confirmDelete" data-id-to-delete="">Delete</button>
                    <button type="button" class="btn bg-primary text-white" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/js/Student.js"></script>