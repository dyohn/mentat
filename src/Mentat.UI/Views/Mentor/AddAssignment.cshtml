@model Mentat.UI.Models.Assignment

@{
	ViewData["Title"] = "AddAssignment";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("SubmitForm", "Mentor", FormMethod.Post))
{
	<h2>Add Assignment Form</h2>

	<!-- ID FIELD -->
	@Html.DisplayName("Id")
	<div>
		@Html.TextBoxFor(model=>model.Id)
		@Html.ValidationMessageFor(model => model.Id,
	"", new { @class = "text-danger" })
	</div>

	<!-- MENTOR NAME FIELD -->
	@Html.DisplayName("MentorName")
	<div>
		@Html.TextBoxFor(model => model.MentorName)
		@Html.ValidationMessageFor(model => model.MentorName,
	"", new { @class = "text-danger" })
	</div>

	<!-- ASSIGNMENT NAME FIELD -->
	@Html.DisplayName("AssignmentName")
	<div>
		@Html.TextBoxFor(model => model.AssignmentName)
		@Html.ValidationMessageFor(model => model.AssignmentName,
	"", new { @class = "text-danger" })
	</div>

	<!-- ASSIGNMENT FILE TYPE FIELD -->
	@Html.DisplayName("AssignmentType")
	<div>
		@Html.RadioButtonFor(m => m.AssignmentType, "c",
	new { @checked = "checked" })
		<span>C</span>
	</div>
	<div>
		@Html.RadioButtonFor(m => m.AssignmentType, "cpp")
		<span>C++</span>
	</div>

	<!-- SELECT & UPLOAD SAMPLE FILE -->
	@Html.DisplayName("SampleExecutableName")
	<div>
		@Html.TextBoxFor(model => model.SampleExecutableName)
		@Html.ValidationMessageFor(model => model.SampleExecutableName,
	"", new { @class = "text-danger" })
	</div>

	<!--SELECT & UPLOAD TEST FILE -->
	@Html.DisplayName("TestFileName")
	<div>
		@Html.TextBoxFor(model => model.TestFileName, new { id = "txtTestFile" })
		<button id="btnAddTestFile">Add Test File</button>
		@Html.ValidationMessageFor(model => model.TestFileName, "", new { @class = "text-danger" })
	</div>
	<div id="testFilesList"></div>

	<div>
		<input type="button" value="Create" onclick="location.href='@Url.Action("download")'" />
	</div>


}

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script>
		$(document).ready(function () {
			var testFiles = []; //initialize empty array for file names

			$("#btnAddTestFile").click(function () {
				var fileName = $("#txtTestFile").val().trim(); //fetch the file name from the text field
				var fileExtension = fileName.split('.').pop(); //extract the file extension
				var allowedExtensions = ['c', 'cpp']; //allowed file extensions

				breakme: if (fileName && allowedExtensions.includes(fileExtension)) { //if the file name is not empty and the extension is allowed
					console.log($("input[type=radio][value=c]").is(":checked"));
					console.log($("input[type=radio][value=cpp]").is(":checked"));
					if ($("input[type=radio][value=cpp]").is(":checked") && fileExtension == 'c') {
						alert("Your file extension must match the type you selected. [Eg: file.c or file.cpp]");
						break breakme;
					}
					else if ($("input[type=radio][value=c]").is(":checked") && fileExtension == 'cpp') {
						alert("Your file extension must match the type you selected. [Eg: file.c or file.cpp]");
						break breakme;
					}

					testFiles.push(fileName); //add file name to the array
					$("#txtTestFile").val(""); //clear textbox for next entry
					displayTestFiles(); //update list
				} else {
					alert("Your file extension must match the type you selected. [Eg: file.c or file.cpp]"); //error message
				}
			});

			function remBut(index) {
				testFiles.remove(index);
			}

			function displayTestFiles() {
				var listHtml = "";
				if (testFiles.length > 0) {
					if (testFiles[0].split('.').pop() == "c") {
						console.log("disable .cpp button");
						$("input[type=radio][value=" + 'cpp' + "]").attr("disabled", true);
						$("input[type=radio][value=" + 'c' + "]").attr("disabled", false);
					}
					else if (testFiles[0].split('.').pop() == "cpp") {
						console.log("disable .c button");
						$("input[type=radio][value=" + 'cpp' + "]").attr("disabled", false);
						$("input[type=radio][value=" + 'c' + "]").attr("disabled", true);
					}
				}
				else {
					$("input[type=radio][value=" + 'cpp' + "]").attr("disabled", false);
					$("input[type=radio][value=" + 'c' + "]").attr("disabled", false);
				}

				for (var i = 0; i < testFiles.length; i++) {
					listHtml += "<div>" + testFiles[i] + " <button class='removeFileButton' data-index='" + i + "'>x</button></div>";
				}
				$("#testFilesList").html(listHtml);
				$(".removeFileButton").click(function () {
					var index = $(this).data("index");
					testFiles.splice(index, 1); //remove the file name from the array
					displayTestFiles();
				});
			}
		});
	</script>
}