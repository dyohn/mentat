@model Mentat.UI.Models.Assignment

@{
    ViewData["Title"] = "AddAssignment";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("SubmitForm", "Mentor", FormMethod.Post))
{
    <h2>Add Assignment Form</h2>

    <!-- ID FIELD -->
    @Html.DisplayName("Id")
    <div>
        @Html.TextBoxFor(model=>model.Id)
        @Html.ValidationMessageFor(model => model.Id,
    "", new { @class = "text-danger" })
    </div>

    <!-- MENTOR NAME FIELD -->
    @Html.DisplayName("MentorName")
    <div>
        @Html.TextBoxFor(model => model.MentorName)
        @Html.ValidationMessageFor(model => model.MentorName,
    "", new { @class = "text-danger" })
    </div>

    <!-- ASSIGNMENT NAME FIELD -->
    @Html.DisplayName("AssignmentName")
    <div>
        @Html.TextBoxFor(model => model.AssignmentName)
        @Html.ValidationMessageFor(model => model.AssignmentName,
    "", new { @class = "text-danger" })
    </div>

    <!-- ASSIGNMENT FILE TYPE FIELD -->
    @Html.DisplayName("AssignmentType")
    <div>
        @Html.RadioButtonFor(m => m.AssignmentType, "c",
    new { @checked = "checked" })
        <span>C</span>
    </div>
    <div>
        @Html.RadioButtonFor(m => m.AssignmentType, "c++")
        <span>C++</span>
    </div>

    <!-- SELECT & UPLOAD SAMPLE FILE -->
    @Html.DisplayName("SampleExecutableName")
    <div>
        @Html.TextBoxFor(model => model.SampleExecutableName)
        @Html.ValidationMessageFor(model => model.SampleExecutableName,
    "", new { @class = "text-danger" })
    </div>

    <!--SELECT & UPLOAD TEST FILE -->
    @Html.DisplayName("TestFileName")
    <div>
        @Html.TextBoxFor(model => model.TestFileName, new { id = "txtTestFile" })
        <button id="btnAddTestFile">Add Test File</button>
        @Html.ValidationMessageFor(model => model.TestFileName, "", new { @class = "text-danger" })
    </div>
    <div id="testFilesList"></div>



    <div>
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>


}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            var testFiles = []; //initialize empty array for file names

            $("#btnAddTestFile").click(function () {
                var fileName = $("#txtTestFile").val().trim(); //fetch the file name from the text field
                var fileExtension = fileName.split('.').pop(); //extract the file extension
                var allowedExtensions = ['c', 'cpp']; //allowed file extensions

                if (fileName && allowedExtensions.includes(fileExtension)) { //if the file name is not empty and the extension is allowed
                    testFiles.push(fileName); //add file name to the array
                    $("#txtTestFile").val(""); //clear textbox for next entry
                    displayTestFiles(); //update list
                } else {
                    alert("Your file extension must match the type you selected. [Eg: file.c or file.cpp]"); //error message
                }
            });

            function displayTestFiles() {
                var listHtml = "";
                for (var i = 0; i < testFiles.length; i++) {
                    listHtml += "<div>" + testFiles[i] + "</div>";
                }
                $("#testFilesList").html(listHtml);
            }
        });
    </script>
}