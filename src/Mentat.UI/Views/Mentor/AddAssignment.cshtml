@model Mentat.UI.Models.Assignment

@{
	ViewData["Title"] = "AddAssignment";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("SubmitForm", "Mentor", FormMethod.Post))
{
	<h2>Add Assignment Form</h2>

	<!-- ID FIELD -->
	@Html.DisplayName("Id")
	<div>
		@Html.TextBoxFor(model=>model.Id)
		@Html.ValidationMessageFor(model => model.Id,
	"", new { @class = "text-danger" })
	</div>

	<!-- MENTOR NAME FIELD -->
	@Html.DisplayName("MentorName")
	<div>
		@Html.TextBoxFor(model => model.MentorName)
		@Html.ValidationMessageFor(model => model.MentorName,
	"", new { @class = "text-danger" })
	</div>

	<!-- ASSIGNMENT NAME FIELD -->
	@Html.DisplayName("AssignmentName")
	<div>
		@Html.TextBoxFor(model => model.AssignmentName)
		@Html.ValidationMessageFor(model => model.AssignmentName,
	"", new { @class = "text-danger" })
	</div>

	<!-- ASSIGNMENT FILE TYPE FIELD -->
	@Html.DisplayName("AssignmentType")
	<div>
		@Html.RadioButtonFor(m => m.AssignmentType, "c",
	new { @checked = "checked" })
		<span>C</span>
	</div>
	<div>
		@Html.RadioButtonFor(m => m.AssignmentType, "cpp")
		<span>C++</span>
	</div>

    <!-- COLORIZE DIFF REPORT FIELD -->
    @Html.DisplayName("AddColor")
    <div>
        @Html.CheckBoxFor(m => m.ColorText)
        <span>Color Text</span>
        <span style = "margin-left: 20px;"></span>
        @Html.CheckBoxFor(m => m.HighlightText)
        <span>Highlight Text</span>
        <span style="margin-left: 20px;"></span>
        @Html.CheckBoxFor(m => m.ApplyTextModifiers)
        <span>Apply Text Modifiers</span>
    </div>

    <!-- SELECT & UPLOAD SAMPLE FILE -->
    @Html.DisplayName("SampleExecutableName")
    <div>
	    @Html.TextBoxFor(model => model.SampleExecutableName, new { id = "sampleExecutableName" })
	    @Html.ValidationMessageFor(model => model.SampleExecutableName,
    "", new { @class = "text-danger" })
    </div>

	<!--SELECT & UPLOAD TEST FILE -->
	@Html.DisplayName("TestFileName")
	<div>
		@Html.TextBoxFor(model => model.TestFileName, new { id = "txtTestFile" })
		<button id="btnAddTestFile">Add Test File</button>
		@Html.ValidationMessageFor(model => model.TestFileName, "", new { @class = "text-danger" })
	</div>
	<div id="testFilesList"></div>

	<div>
		<input type="submit" value="Create" class="btn btn-primary" />
	</div>


}

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script>
        function configureTestFiles(testFiles) {
            var token = $('input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: '@Url.Action("SubmitForm", "MentorController")',
                type: 'POST',
                data: { testFileNames: testFiles, __RequestVerificationToken: token },
                success: function (data) {
                    console.log('Test files configured successfully');
                },
                error: function (xhr, status, error) {
                    console.log('Error configuring test files: ' + error);
                }
            });
        }

		$(document).ready(function () {

			var testFiles = []; //initialize empty array for file names

            // Disable "Create" button initially
            $("#createButton").attr("disabled", true);

            // Check if both fields have values
            function checkBothFields() {
                var sampleFileName = $("#sampleExecutableName").val();
                var selectedAssignmentType = $("input[type=radio][name=AssignmentType]:checked").val();

                if (sampleFileName.length > 0 && testFiles.length > 0) {
                    $("#createButton").attr("disabled", false);
                } else {
                    $("#createButton").attr("disabled", true);
                }
            }

            // Enable/disable "Create" button based on Sample File Name field
            $("#sampleExecutableName").on("input", function() {
                checkBothFields();
            });

            // Enable/disable "Create" button based on Assignment Type change
            $("input[type=radio][name=AssignmentType]").on("change", function() {
                checkBothFields();
            });

			$("#btnAddTestFile").click(function () {
				var fileName = $("#txtTestFile").val().trim(); //fetch the file name from the text field
				var fileExtension = fileName.split('.').pop(); //extract the file extension
				var allowedExtensions = ['c', 'cpp']; //allowed file extensions

				breakme: if (fileName) { //if the file name is not empty
					console.log($("input[type=radio][value=c]").is(":checked"));
					console.log($("input[type=radio][value=cpp]").is(":checked"));
					testFiles.push(fileName); //add file name to the array
					$("#txtTestFile").val(""); //clear textbox for next entry
                    checkBothFields(); //Enable create button button
					displayTestFiles(); //update list
				} else {
					alert("You must input a test file."); //error message
				}
			});

			function displayTestFiles() {
				var listHtml = "";
				for (var i = 0; i < testFiles.length; i++) {
					listHtml += "<div>" + testFiles[i] + " <button class='removeFileButton' data-index='" + i + "'>x</button></div>";
				}
				$("#testFilesList").html(listHtml);
				$(".removeFileButton").click(function () {
					var index = $(this).data("index");
					testFiles.splice(index, 1); //remove the file name from the array
                    checkBothFields(); //Do we need to disable the button again?
					displayTestFiles();
				});
                
			}

            $("#submitButton").click(function () {
                if (testFiles.length == 0) {
                    alert("Please add at least one test file.");
                    return false;
                }
                else {
                    // Submit the form
                    configureTestFiles(testFiles);
                    $('#form').submit();
                }
            });
            

		});
	</script>
}