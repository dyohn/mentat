@using static Mentat.Domain.Constants

@model Mentat.UI.ViewModels.CardViewModel

@{
    var isAdd = Model.Id == null;
    var title = isAdd ? "Create" : "Edit";
    ViewData["Title"] = title;
}

<script src="~/js/Student.js"></script>

<h1>@title Card</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="SaveCard" asp-route-id="@Model.Id">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Subject" class="control-label"></label>
                <input asp-for="Subject" class="form-control" />
                <span asp-validation-for="Subject" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Question" class="control-label"></label>
                <input asp-for="Question" class="form-control" />
                <span asp-validation-for="Question" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Answer" class="control-label"></label>
                <input asp-for="Answer" class="form-control" />
                <span asp-validation-for="Answer" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsCustom" /> @Html.DisplayNameFor(model => model.IsCustom)
                </label>
            </div>
            <div class="form-group">
                <label asp-for="DifficultyLevel" class="control-label"></label>
                @Html.DropDownListFor(m => m.DifficultyLevel, ((DifficultyLevel[]) Enum.GetValues(typeof(DifficultyLevel))).ToList()
                    .Select(d => new SelectListItem { Text = d.ToString(), Value = d.ToString() } ), null, new { style = "width: 250px;" })
                <span asp-validation-for="DifficultyLevel" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Notes" class="control-label"></label>
                <input asp-for="Notes" class="form-control" />
                <span asp-validation-for="Notes" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Tags" class="control-label"></label>
                <div class="tag-field" onclick="Array.from(this.children).find(n=>n.tagName==='INPUT').focus()">
                    @{
                        if (Model.Tags != null)
                        {
                            foreach (string tag in Model.Tags)
                            {
                                if (tag.Length < 1) continue; // no reason to try and display a blank tag
                                @:<div class="tag-item">
                                    <span class="tag-value">@tag</span>
                                    <div class="fa fa-close" onclick="this.parentNode.remove()"></div>
                                @:</div>
                            }
                        }

                    }
                    <input type="text" onkeyup="tagFieldKeyup(this)">
                </div>
                <span asp-validation-for="Tags" class="text-danger"></span>
            </div>
            <input type="hidden" name="tagList" id="tagList" value="" asp-for="Tags"/>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" onclick="prepareTagList();" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
